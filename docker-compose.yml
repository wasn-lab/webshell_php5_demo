version: '3.7'
services:
  #正常的網頁後端Container(PHP)
  app:
    image: php:5-fpm
    container_name: castle-app
    restart: unless-stopped
    environment:
      TZ: Asia/Taipei
    working_dir: /var/www/
    pid: "host" #為了要讓Falco警告裡面的PID可以直接拿來檢查php-fpm的log，所以要讓他們在同一個PID namespace
    volumes:
      - ./:/var/www
      - ${PWD}/docker-compose/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
    networks:
      - castle-network
    
  #假的網頁後端Container (Honeypot Container)
  app2:
    image: php:5-fpm
    container_name: castle-app2
    restart: unless-stopped
    environment:
      TZ: Asia/Taipei
    working_dir: /var/www/
    hostname: "honeypot"
    volumes:
      - ./public/:/var/www/public/ #因為他是Honeypot，所以只給他public裡面的檔案，其他的機密檔案就不掛載進去了
    networks:
      - castle-network

  # Nginx web server
  nginx:
    image: nginx:1.21.1-alpine
    container_name: castle-nginx
    restart: unless-stopped
    ports:
      - '8088:8080'
    volumes:
      - ./:/var/www:ro
      - ./docker-compose/nginx/${ENV_TYPE:-develop}:/etc/nginx/conf.d:ro
      - ./docker-compose/nginx/nginx_log:/var/log/nginx
    environment:
      - TZ=Asia/Taipei
    networks:
      - castle-network
    depends_on:
      - app
  
  falco_python:
    build:
      context: ./docker-compose/falco_python
      dockerfile: Dockerfile.falco_python
    container_name: falco_python
    restart: unless-stopped
    environment:
      TZ: Asia/Taipei
    working_dir: /app/
    volumes:
      - ./docker-compose/falco_python:/app
      - ./docker-compose/php-fpm:/php-fpm:ro #需要讀取php-fpm的設定檔
      - ./docker-compose/nginx:/nginx #需要去修改Nginx的設定檔
      - /var/run/docker.sock:/var/run/docker.sock #因為要在Container裡面使用Python的Docker套件，所以需要Docker Engine API掛載進去
    networks:
      - castle-network
    depends_on:
      - nginx
      - app
      - app2
networks:
  castle-network:
    driver: bridge
